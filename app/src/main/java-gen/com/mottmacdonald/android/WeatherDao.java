package com.mottmacdonald.android;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mottmacdonald.android.Weather;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WEATHER.
*/
public class WeatherDao extends AbstractDao<Weather, Long> {

    public static final String TABLENAME = "WEATHER";

    /**
     * Properties of entity Weather.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Condition = new Property(1, String.class, "condition", false, "CONDITION");
        public final static Property Temperature = new Property(2, String.class, "temperature", false, "TEMPERATURE");
        public final static Property Humidity = new Property(3, String.class, "humidity", false, "HUMIDITY");
        public final static Property Wind = new Property(4, String.class, "wind", false, "WIND");
        public final static Property Remarks = new Property(5, String.class, "remarks", false, "REMARKS");
        public final static Property SaveDate = new Property(6, String.class, "saveDate", false, "SAVE_DATE");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
    };


    public WeatherDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WEATHER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'CONDITION' TEXT NOT NULL ," + // 1: condition
                "'TEMPERATURE' TEXT," + // 2: temperature
                "'HUMIDITY' TEXT," + // 3: humidity
                "'WIND' TEXT," + // 4: wind
                "'REMARKS' TEXT," + // 5: remarks
                "'SAVE_DATE' TEXT," + // 6: saveDate
                "'DATE' INTEGER);"); // 7: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WEATHER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Weather entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCondition());
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(3, temperature);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(4, humidity);
        }
 
        String wind = entity.getWind();
        if (wind != null) {
            stmt.bindString(5, wind);
        }
 
        String remarks = entity.getRemarks();
        if (remarks != null) {
            stmt.bindString(6, remarks);
        }
 
        String saveDate = entity.getSaveDate();
        if (saveDate != null) {
            stmt.bindString(7, saveDate);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Weather readEntity(Cursor cursor, int offset) {
        Weather entity = new Weather( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // condition
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // temperature
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // humidity
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wind
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remarks
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // saveDate
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Weather entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCondition(cursor.getString(offset + 1));
        entity.setTemperature(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHumidity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWind(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRemarks(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSaveDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Weather entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Weather entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
